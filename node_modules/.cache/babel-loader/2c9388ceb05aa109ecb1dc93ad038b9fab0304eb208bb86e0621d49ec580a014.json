{"ast":null,"code":"var _jsxFileName = \"/Users/wendyparedes/Desktop/REACT/Preentrega-REACT/src/components/practicadesuma.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\n\n//! Creamos una variable persistente que no volverá a representar el componente cuando cambie de valor.\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const UseRefComoVariable = () => {\n  _s();\n  const [_, setUpdateCounter] = useState(false);\n  const refCounter = useRef(0);\n  const handleRef = () => {\n    refCounter.current++;\n    console.log(\"refCounter: \" + refCounter.current);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ejemplo useRef como variable\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setUpdateCounter(prev => !prev),\n      children: \"Actualizo el estado por lo cual se actualiza la referencia en pantalla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRef,\n      children: \"Actualizo el valor de current pero s\\xF3lo en consola hasta que actualice el estado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n_s(UseRefComoVariable, \"ijEdAzJIoh/n4jf1wmDgxOLZtLA=\");\n_c = UseRefComoVariable;\nvar _c;\n$RefreshReg$(_c, \"UseRefComoVariable\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","UseRefComoVariable","_s","_","setUpdateCounter","refCounter","handleRef","current","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","prev","_c","$RefreshReg$"],"sources":["/Users/wendyparedes/Desktop/REACT/Preentrega-REACT/src/components/practicadesuma.jsx"],"sourcesContent":["import { useState, useRef } from \"react\"\n\n//! Creamos una variable persistente que no volverá a representar el componente cuando cambie de valor.\n\nexport const UseRefComoVariable = () => {\n\tconst [_, setUpdateCounter] = useState(false)\n\n\tconst refCounter = useRef(0)\n\n\tconst handleRef = () => {\n\t\trefCounter.current++\n\t\tconsole.log(\"refCounter: \" + refCounter.current)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<h2>Ejemplo useRef como variable</h2>\n\t\t\t<button onClick={() => setUpdateCounter(prev => !prev)}>\n\t\t\t\tActualizo el estado por lo cual se actualiza la referencia en pantalla\n\t\t\t</button>\n\t\t\t<button onClick={handleRef}>\n\t\t\t\tActualizo el valor de current pero sólo en consola hasta que actualice el\n\t\t\t\testado\n\t\t\t</button></>\n\t)\n}"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;;AAExC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEA,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvC,MAAM,CAACC,CAAC,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMU,UAAU,GAAGT,MAAM,CAAC,CAAC,CAAC;EAE5B,MAAMU,SAAS,GAAGA,CAAA,KAAM;IACvBD,UAAU,CAACE,OAAO,EAAE;IACpBC,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGJ,UAAU,CAACE,OAAO,CAAC;EACjD,CAAC;EAED,oBACCT,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACCZ,OAAA;MAAAY,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrChB,OAAA;MAAQiB,OAAO,EAAEA,CAAA,KAAMX,gBAAgB,CAACY,IAAI,IAAI,CAACA,IAAI,CAAE;MAAAN,QAAA,EAAC;IAExD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACThB,OAAA;MAAQiB,OAAO,EAAET,SAAU;MAAAI,QAAA,EAAC;IAG5B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAAE,CAAC;AAEf,CAAC;AAAAZ,EAAA,CArBYD,kBAAkB;AAAAgB,EAAA,GAAlBhB,kBAAkB;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}